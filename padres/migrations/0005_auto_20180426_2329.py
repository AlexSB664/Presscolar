# Generated by Django 2.0.1 on 2018-04-26 23:29

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('padres', '0004_tutor_tut_usurio'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profesor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pro_fechaNacimento', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_teacher', models.BooleanField(default=False)),
                ('is_tutor', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            managers=[
                ('groups', django.db.models.manager.Manager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='tutor',
            name='tut_apellidoMaterno',
        ),
        migrations.RemoveField(
            model_name='tutor',
            name='tut_apellidoPaterno',
        ),
        migrations.RemoveField(
            model_name='tutor',
            name='tut_correo',
        ),
        migrations.RemoveField(
            model_name='tutor',
            name='tut_nombre',
        ),
        migrations.RemoveField(
            model_name='tutor',
            name='tut_usurio',
        ),
        migrations.AlterField(
            model_name='tutor',
            name='tut_usuario',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='padres.User'),
        ),
        migrations.AddField(
            model_name='profesor',
            name='pro_nombre',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='padres.User'),
        ),
    ]
